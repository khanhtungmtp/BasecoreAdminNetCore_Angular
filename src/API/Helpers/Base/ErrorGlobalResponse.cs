using System.Text.Json.Serialization;

namespace API.Helpers.Base;

public class ErrorGlobalResponse
{
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("trackId")]
    [JsonPropertyOrder(-6)]
    public string? TrackId { get; set; }
    //
    // Summary:
    //     A URI reference [RFC3986] that identifies the problem type. This specification
    //     encourages that, when dereferenced, it provide human-readable documentation for
    //     the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member
    //     is not present, its value is assumed to be "about:blank".
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("type")]
    [JsonPropertyOrder(-5)]
    public string? Type { get; set; }
    //
    // Summary:
    //     A short, human-readable summary of the problem type. It SHOULD NOT change from
    //     occurrence to occurrence of the problem, except for purposes of localization(e.g.,
    //     using proactive content negotiation; see[RFC7231], Section 3.4).
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("title")]
    [JsonPropertyOrder(-4)]
    public string? Title { get; set; }
    //
    // Summary:
    //     The HTTP status code([RFC7231], Section 6) generated by the origin server for
    //     this occurrence of the problem.
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("status")]
    [JsonPropertyOrder(-3)]
    public int? Status { get; set; }
    //
    // Summary:
    //     A human-readable explanation specific to this occurrence of the problem.
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("detail")]
    [JsonPropertyOrder(-2)]
    public string? Detail { get; set; }
    //
    // Summary:
    //     A URI reference that identifies the specific occurrence of the problem. It may
    //     or may not yield further information if dereferenced.
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("instance")]
    [JsonPropertyOrder(-1)]
    public string? Instance { get; set; }

    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("errors")]
    [JsonPropertyOrder(-1)]
    public IEnumerable<string>? Errors { get; set; }
}
